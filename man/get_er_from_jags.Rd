% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/er_and_sucra.R
\name{get_er_from_jags}
\alias{get_er_from_jags}
\title{The Expected Rank from a JAGS model}
\usage{
get_er_from_jags(
  data,
  id_application,
  id_voter = NULL,
  grade_variable,
  path_to_jags_model = NULL,
  n_chains = 2,
  n_iter = 5000,
  n_burnin = 1000,
  n_adapt = 1000,
  max_iter = 1e+06,
  id_section = NULL,
  theta_name = "application_intercept",
  voter_name = "voter_intercept",
  tau_name = "tau_application",
  tau_voter_name = "tau_voter",
  tau_section_name = NULL,
  sigma_name = "sigma",
  rank_theta_name = "rank_theta",
  rank_pm = TRUE,
  ordinal_scale = FALSE,
  heterogeneous_residuals = FALSE,
  point_scale = NULL,
  mcmc_samples = NULL,
  inits_type = "random",
  initial_values = NULL,
  variables_to_sample = "default",
  names_variables_to_sample = NULL,
  seed = 1991,
  quiet = FALSE,
  compute_ess = FALSE
)
}
\arguments{
\item{data}{long data frame with all information as in the jags model
defined below.}

\item{id_application}{the name of the application variable in the data}

\item{id_voter}{the name of the voter variable in the data (default = NULL)}

\item{grade_variable}{the name of the outcome variable. This variable has to
be numeric and a higher grade means a better quality evaluation.
Extensions for non-linear models will be provided at a later stage.}

\item{path_to_jags_model}{the path to the jags txt file, if null, the
default model is used. (default = NULL)}

\item{n_chains}{number of chains for the JAGS sampler. (default = 2)}

\item{n_iter}{how many iterations used in the JAGS sampler?
(default = 5000)}

\item{n_burnin}{number of burnin iterations discarded. (default = 1000)}

\item{n_adapt}{number of iterations discarded for the adaptation phase.
(default = 1000)}

\item{max_iter}{maximum number of iteration (default = 1 million)}

\item{id_section}{name of the section}

\item{theta_name}{the name of the application identifier in the JAGS model.
(default = application_intercept").}

\item{voter_name}{the name of the voter intercept in the JAGS model (default
= voter_intercept).}

\item{tau_name}{name of the tau in the jags model, being the standard error
of the application effects (default = tau_application).}

\item{tau_voter_name}{name of the standard error of the voter effect
(default = tau_voter).}

\item{tau_section_name}{name of the standard error of the section effect, if
needed (default = NULL).}

\item{sigma_name}{name of the standard deviation of the full model.
(default = sigma)}

\item{rank_theta_name}{the name of the rank of theta in the JAGS model
(default = rank_theta).}

\item{rank_pm}{should the rank based on the posterior mean by computed?
default = TRUE}

\item{ordinal_scale}{dummy variable informing us on whether or not the
outcome is on an ordinal scale (default = FALSE)}

\item{heterogeneous_residuals}{dummy variable informing us on whether or not
the residuals should be heterogeneous (in this case you have to update the
JAGS model too, default = FALSE)}

\item{point_scale}{integer informing us on the number of points of the
ordinal scale; not needed for continuous scale (default = NULL)}

\item{mcmc_samples}{if the mcmc sample has already been run. This should be
the direct output from get_mcmc_samples. (default = NULL).}

\item{inits_type}{type of the initial values, default is "random", but if two
chains are used, the initial values can also be  "overdispersed"}

\item{initial_values}{The list of initial values for the jags sampler can be
provided directly}

\item{variables_to_sample}{should the default variables be samples, or will
they be "specified" (in names_variables_to_sample), default is "default".}

\item{names_variables_to_sample}{if variables to sample are specified, write
their names here, as a character-vector, default is NULL.}

\item{seed}{set a seed for the JAGS model (default = 1991)}

\item{quiet}{if the default model is used this function generates a warning.
if quiet = TRUE, this warning is not shown.}

\item{compute_ess}{Should the effective sample size and the mcmc errors be
calculated? (default = FALSE).}
}
\value{
the result is a list with the

1) a table with the ranked proposals:
id_application is the unique identifier of the proposal/application. rank is
the simplistic rank based on the average of the individual votes, avg_grade.
er is the expected rank. rank_pm is the rank of the posterior mean and pcer
is the percentile based on er.

2) the number of chains (n_chains), the number of adaptive iterations
(n_adapt), the number of burnin iterations (n_burnin), and the final number
of iterations actually samples (n_iter).

3) the effective sample size (ess) of all relevant parameters and the
MCMC error (mcmc_error) of the same parameters.
}
\description{
This function computes the ER via JAGS
}
\examples{
data_panel1 <- get_mock_data() \%>\%
         filter(panel == "p1")
\dontrun{
ER_results <- get_er_from_jags(data = data_panel1,
                               id_application = "application",
                               id_voter = "voter",
                               grade_variable = "num_grade",
                               path_to_jags_model = NULL)
# OR, by giving an mcmc object into the function
mcmc_samples <- get_mcmc_samples(data = data_panel1,
                                 id_application = "application",
                                 id_voter = "voter",
                                 grade_variable = "num_grade")
ER_results <- get_er_from_jags(data = data_panel1,
                              id_application = "application",
                              id_voter = "voter",
                              grade_variable = "num_grade",
                              mcmc_samples = mcmc_samples)
}
}
