[{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"package-erforresearch","dir":"Articles","previous_headings":"","what":"Package: ERforResearch","title":"Point-by-Point Response Package Review","text":"software used computations manuscript freely accessible online. package ERforResearch_2.0.0 can easily downloaded GitHub https://github.com/snsf-data/ERforResearch installed computer. Please discuss whether want keep ER name package. frequently use notion Bayesian ranking (BR), package also called BRforResearch instead ERforResearch. supplement https://snsf-data.github.io/ERpaper-online-supplement/ improved several ways better demonstrate reproducibility results: Currently, code plots missing. chunks code copy-pasted code produce error, function () missing. Although rankability discussed detail manuscript, used online supplement. simulation study provided supplement. Reply: happy read, installation package straightforward. Dr. Roos raises good point suggesting change name BRforResearch, considered. However, feel like changing name stage project might big hazzle. publication referencing package already published preprint, paper submission already quite far. online supplement paper updated accordingly. code plots can looked . problem () function resolved, dependency ERforResearch package {} removed. rankability still present supplement, implemented package. However, rankability discussed paper, add reference Lingsma (2009) documentation function. Otherwise, appear bit arbitrary user. simulation study still provided. code simulated data provided appendix manuscript, now, judged enough. However, yes, simulation study part therefore reproducible.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"function-get_default_jags_model","dir":"Articles","previous_headings":"","what":"Function: get_default_jags_model()","title":"Point-by-Point Response Package Review","text":"function well implemented. gives convenient access four models obtained crossing continuous/ordinal likelihoods homogeneous/heterogeneous variances. function writes code JAGS default_jags_model.txt file. Although file can contain continuous/homogeneous model, can also contain three models. Remarks: connection four models provided function models discussed main manuscript unclear. particular, JAGS code provided appendix main manuscript fit models. JAGS models provide posteriors parameter overall_mean. Instead, parameter (called ψ μ main manuscript) fixed overall mean grades. Please explain issue main manuscript. Reply: Regarding first remark, JAGS code appendix, changed one implemented functions ERforResearch. Also second remark implemented. clear now, model definition overall_mean model parameter estimated simply summary data. addition, added model allows different sub-panels/sections merged default model option. parameter subpanels added Boolean variable (default FALSE).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"function-get_mcmc_samples","dir":"Articles","previous_headings":"","what":"Function: get_mcmc_samples()","title":"Point-by-Point Response Package Review","text":"function well implemented. However, uses 2 chains, provides values chains fully reproducible, uses outdated criterion . Therefore, functionality improved several ways. Remarks manual: value function list. example explicitly state path_to_jags_model. situation, unclear default model means. assume default model continuous/homogeneous model. potential user, one provide additional example, non-default model used. Remarks implementation: JAGS provides 4 different random number generators challenge convergence MCMC chains. specify reproducible MCMC chains JAGS, one needs explicit starting values parameters, explicit values random number generators, separate seed values. One example initiate 4 chains fully reproducible way JAGS provided file review_ERforResearch_R_code.R. puts within-chain -chain variability relation , convergence MCMC chains can better assessed 4 different chains available computation . value 1.1 threshold applied assess convergence MCMC chains outdated. shown lower threshold necessary yield reasonable estimates target quantities (Vats Knudson, 2021; Vehtari et al., 2021) number iterations MCMC chains informs quality posteriors effective sample size (ESS). means Table 6 provided appendix main manuscript helpful user without ESS values. Note ESS diagnostic proposed Vats Knudson (2021) available public use R package stableGR. Alternatively, trace plots one use rank plots Vehtari et al. (2021). See also mcmc_rank_hist function provided package bayesplot Gabry et al. (2019). convinced uniform priors U(0,2] precisions optimal. main manuscript, refer Gelman (2006) justify choice. ? opinion, Gelman (2006) Gelman Hill (2007) warn uniform priors can cause unexpected posteriors. Note also Ott et al. (2021) demonstrated truncation imposed uniform prior can unpleasant impact formativeness posteriors. 4 models implemented ERforResearch package challenging. Therefore, prior assumptions can crucial inference. long term, please consider use priors heterogeneity parameter, sensitivity ER estimates prior assumptions can assessed. Alternatively, elicit optimistic sceptical priors hyperparameters. Reply: Regarding remarks manual, updated documentation function, saying output list. Also example updated. Next ’ll go implementation points: 2.: changed default two four chains samplers. Therefore, function name get_inits_overdispersed_tow_chains changed get_inits_overdispersed_four_chains, also four different samplers initialization list. reproduciblitly code ensured following script provided review: default models initial values set (overdispersed) randomly selected based seed, fed sampling algorithm. 3.: suggested recent literature (Vats Knudson, 2021; Vehtari et al., 2021), changed threshold applied 1.01. optimization loop updated using runjags::extend.jags(). important give function max.iter parameter value high, default set 1’000’000. Otherwise, run forever. 4.: runjags-package provides effective sample sizes well Monte Carlo error. 5.: rank histograms available bayesplot package. graphical representation added vignette. 6.: TBA Additionally, tests performed package function extended: possible combinations default model generation now tested. Therefore, testing also takes longer. Also vignette needed updated general.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"function-get_er_from-jags","dir":"Articles","previous_headings":"","what":"Function: get_er_from jags","title":"Point-by-Point Response Package Review","text":"function computes ER estimates either object provided mcmc_samples object obtained running get_mcmc_samples function . Remarks manual: Describe meaning variables: avg_grade, er, rank_pm, pcer. Show example function applied mcmc_samples object. Remarks function: function based rankability although notion used revised manuscript. Please keep mind values different ICC comparable across different settings. Reply: Regarding remarks documentation: return object function explained detail example mcmc_samples object provided added. Regarding function : mentioning computation rankability deleted package, might confusing. comment ICC relevant mainly paper computed package.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"function-plot-er-distributions","dir":"Articles","previous_headings":"","what":"Function: plot er distributions","title":"Point-by-Point Response Package Review","text":"function plots expected rank distributions credible intervals based mcmc_samples object. Remarks manual: Provide example used function mock data. Reply: example added.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/articles/point_by_point_response.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Point-by-Point Response Package Review","text":"Gabry, J., Simpson, D., Vehtari, ., Betancourt, M., Gelman, ., 2019. Visualization Bayesian workflow. Journal Royal Statistical Society, Series 182 (2), 389–402. URL https://rss.onlinelibrary.wiley.com/doi/full/10.1111/rssa.12378 Gelman, ., 2006. Prior distributions variance parameters hierarchical models (Comment Article Browne Draper). Bayesian Analysis 1 (3), 515–534. Gelman, ., Hill, J., 2007. Data Analysis Using Regression Multilevel/Hierarchical Models. Cambridge University Press, Cambridge. Ott, M., Plummer, M., Roos, M., 2021. vague vague? informative informative? Reference analysis Bayesian meta-analysis. Statistics Medicine 40 (20), 4505–4521. URL https://onlinelibrary.wiley.com/doi/10.1002/sim.9076 Vats, D., Knudson, C., 2021. Revisiting Gelman-Rubin diagnostic. Statistical Science 36 (4), 518–529. URL https://arxiv.org/abs/1812.09384 Vehtari, ., Gelman, ., Simpson, D., Carpenter, B., B ̈urkner, P., 2021. Rank-normalization, folding, localization: improved ̂ R assessing convergence MCMC (Discussion). Bayesian Analysis 16 (2), 667–718. URL https://doi.org/10.1214/20-BA1221","code":""},{"path":"https://snsf-data.github.io/ERforResearch/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rachel Heyard. Author, maintainer.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heyard R (2023). ERforResearch: Expected Rank Research Evaluation. R package version 4.0.0.","code":"@Manual{,   title = {ERforResearch: Expected Rank for Research Evaluation},   author = {Rachel Heyard},   year = {2023},   note = {R package version 4.0.0}, }"},{"path":"https://snsf-data.github.io/ERforResearch/index.html","id":"erforresearch","dir":"","previous_headings":"","what":"Expected Rank for Research Evaluation","title":"Expected Rank for Research Evaluation","text":"package implements functionality use expected ranks (ER) context research evaluation presented publication. demonstration major functions check vignette (Demo ERforResearch).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Expected Rank for Research Evaluation","text":"package can downloaded github using devtools-package:","code":"# First, you might have to install devtools from CRAN install.packages(\"devtools\")  # Then install ERforResearch devtools::install_github(\"snsf-data/ERforResearch\")"},{"path":"https://snsf-data.github.io/ERforResearch/index.html","id":"requirement","dir":"","previous_headings":"","what":"Requirement","title":"Expected Rank for Research Evaluation","text":"Bayesian Hierarchical Models ER fitted JAGS using rjags. Therefore install rjags CRAN JAGS following instructions .","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/assessor_behavior_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Assessor behavior distributions — assessor_behavior_distribution","title":"Assessor behavior distributions — assessor_behavior_distribution","text":"function plots distibutions average voter behavior ($mu_j$'s model). Make sure using get_mcmc_samples() function, parameter average voter behavior (default nu) sampled JAGS model.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/assessor_behavior_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assessor behavior distributions — assessor_behavior_distribution","text":"","code":"assessor_behavior_distribution(   get_mcmc_samples_result,   n_assessors,   name_mean = \"nu\",   names_assessors = \"voter\",   title = NULL,   xlim_min = -1,   xlim_max = 1,   scale = 1.75 )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/assessor_behavior_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assessor behavior distributions — assessor_behavior_distribution","text":"get_mcmc_samples_result mcmc samples n_assessors number voters panel / call name_mean name parameter estimating average voter behavior (default = \"nu\"). names_assessors names voters written y-axis ticks (default = \"voter\"). title title plot (default = NULL, title). xlim_min minimum x-axis (default = -1). xlim_max maximum x-axis (default = 1). scale `geom_density_ridges_gradient()` (default = 1.75).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/assessor_behavior_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assessor behavior distributions — assessor_behavior_distribution","text":"result plot posterior distributions average voter behaviors.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_default_jags_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a default jags model — get_default_jags_model","title":"Write a default jags model — get_default_jags_model","text":"function writes default JAGS model, given parameters stores . txt certain path.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_default_jags_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a default jags model — get_default_jags_model","text":"","code":"get_default_jags_model(   outcome_variable = \"continuous\",   nine_point_scale_continuous = FALSE,   residuals = \"homogeneous\",   subpanels = FALSE,   path = \"default_jags_model.txt\",   quiet = FALSE )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_default_jags_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a default jags model — get_default_jags_model","text":"outcome_variable nature outcome variable: continuous ordinal.  default grades assumed `\"continuous\"`. nine_point_scale_continuous boolean variable indicated whether nine-point continuous scale used. default set `FALSE`, means six-point scale used default. aware specifications due usage package Swiss National Science Foundation. residuals nature residuals model: homogeneous heterogeneous. default residuals assumed `\"homogeneous\"`. subpanels individual votes come different sub-panels need merged. default set `FALSE` meaning rankings produced panel separately. path stored, relative getwd()? default set `\"jags_model.txt\"`. Hence simply written working directory. quiet set `TRUE`, function show messages caution.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_default_jags_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write a default jags model — get_default_jags_model","text":"Note many specific default parameters specified easy usage integration funding evaluation system Swiss National Science Foundation might applicable evaluation systems. model defined random component proposal assessor. parameter subpanels set TRUE additional grouping panel defined. user invited write model definition flexibility needed. path user-specified model can given parameter `get_mcmc_samples()` `get_er_from_jags()` functions. user can also simply decide continuous ordinal outcome variable, homogeneous heterogeneous residuals, without subpanel merging (options integrated), write model .txt file adapt .","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_default_jags_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a default jags model — get_default_jags_model","text":"","code":"# The model definition .txt is stored in the file \"default_jags_model.txt\" if (FALSE) { get_default_jags_model() }"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_er_from_jags.html","id":null,"dir":"Reference","previous_headings":"","what":"The Expected Rank from a JAGS model — get_er_from_jags","title":"The Expected Rank from a JAGS model — get_er_from_jags","text":"function computes ER via JAGS","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_er_from_jags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Expected Rank from a JAGS model — get_er_from_jags","text":"","code":"get_er_from_jags(   data,   id_proposal,   id_assessor = NULL,   grade_variable,   path_to_jags_model = NULL,   n_chains = 4,   n_iter = 10000,   n_burnin = 4000,   n_adapt = 1000,   max_iter = 1e+06,   id_panel = NULL,   theta_name = \"proposal_intercept\",   assessor_name = \"assessor_intercept\",   tau_name_proposal = \"tau_proposal\",   tau_name_assessor = \"tau_assessor\",   tau_name_panel = NULL,   sigma_name = \"sigma\",   rank_theta_name = \"rank_theta\",   rank_pm = TRUE,   ordinal_scale = FALSE,   heterogeneous_residuals = FALSE,   point_scale = NULL,   mcmc_samples = NULL,   inits_type = \"random\",   initial_values = NULL,   names_variables_to_sample = NULL,   seed = 1991,   quiet = FALSE,   rhat_threshold = 1.01,   runjags_method = \"parallel\" )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_er_from_jags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Expected Rank from a JAGS model — get_er_from_jags","text":"data data frame, long format, needed variables specified JAGS model defined text file path given `path_to_jags_model`. id_proposal name variable `data` indicates ID evaluated proposal. id_assessor name variable `data` indicates ID assessor. default `= NULL`, case assessor evaluates/grades one proposal. grade_variable name variable `data` outcome variable, .e. grade score. path_to_jags_model path text file including JAGS model definition. default `= NULL`, function use default model implemented package; `get_default_jags_model()`. n_chains number chains JAGS sampler. default number chains set four. creates optimal conditions changed. parameter `runjags::run.jags()` called `n.chains`. n_iter many iterations used JAGS sampler? `sample` `runjags::run.jags()` function. set `10000` default. n_burnin number burnin iterations included adaptation phase. default set `4000` parameter `runjags::run.jags()` called `burnin`. n_adapt number adaptive iterations discarded adaptation phase. default set `1000`. parameter `runjags::run.jags()` called `adapt`. max_iter maximum number iteration. JAGS sample extended convergence chains. ensure sampler run extend forever maximum number iterations per chain can defined. number iterations achieved, sampler extended. default, function allows `1000000` iterations stopping. id_panel name variable `data` indicates ID panel. default `= NULL`, case proposals evaluated panel, panel creates ranking. scenario, ranking established combining merging panels. theta_name name proposal intercept JAGS model. default also goes default JAGS model build package `proposal_intercept`. assessor_name name assessor intercept JAGS model. default also goes default JAGS model build package `assessor_intercept`. tau_name_proposal name tau JAGS model, standard error proposal effects. default also goes default JAGS model build package `tau_proposal`. tau_name_assessor name standard error assessor effect JAGS model.  default also goes default JAGS model build package `tau_assessor`. tau_name_panel name standard error panel effect, needed. default also goes default JAGS model build package `tau_panel`. needed ranking established combining merging panels, therefore important `id_panel` `NULL`. sigma_name name standard deviation full model. default also goes default JAGS model build package `sigma`. rank_theta_name name rank theta JAGS model. default also goes default JAGS model build package `rank_theta`. rank_pm rank based posterior mean computed presented Figure? default parameter set `TRUE`. ordinal_scale dummy variable informing us whether outcome ordinal scale. default, assume numeric scale parameter set `FALSE`. heterogeneous_residuals dummy variable informing us whether residuals heterogeneous. default residuals assumed homogeneous parameter set `FALSE`. point_scale integer informing us number points ordinal scale; needed continuous scale. default, assume numeric scale need information  parameter set `NULL`. mcmc_samples mcmc sample already run. direct output `get_mcmc_samples()`. default, set `NULL` sampler run. mcmc samples provided , sampling information , e.g. number chains iterations disgarded. inits_type type initial values. default initial values randomly selected, .e. `inits_type = \"random\"`. Alternatively, four chains used, initial values can also `\"overdispersed\"`. initial_values list initial values jags sampler can provided directly. Otherwise `get_inits_overdispersed_four_chains` overdispersed version used, randomly selected. Always using seed ensure computational reproducibility. names_variables_to_sample variables sample specified, write names , character-vector, default NULL. seed seed JAGS model (default = `1991`). seed generate seeds JAGS samplers, ensures reproducibility; see also Details. quiet default model used function generates warning. `quiet = TRUE`, warning shown. rhat_threshold threshold rhat decide whether chains converged. Gelman suggested 1.1, smaller better. Hence functions threshold set `1.01` default. runjags_method method call JAGS (`runjags::run.jags()` default set `parallel`).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_er_from_jags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Expected Rank from a JAGS model — get_er_from_jags","text":"result list 1) table ranked proposals: id_proposal unique identifier proposal. rank simplistic rank based average individual votes, avg_grade. er expected rank. rank_pm rank posterior mean pcer percentile based er. 2) number chains (n_chains), number adaptive iterations (n_adapt), number burnin iterations (n_burnin), final number iterations actually samples (n_iter). 3) MCMC summary convergence status.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_er_from_jags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Expected Rank from a JAGS model — get_er_from_jags","text":"","code":"data_panel1 <- get_mock_data() %>%          filter(panel == \"p1\") if (FALSE) { ER_results <- get_er_from_jags(data = data_panel1,                                id_proposal = \"proposal\",                                id_assessor = \"assessor\",                                grade_variable = \"num_grade\",                                path_to_jags_model = NULL) # OR, by giving an mcmc object into the function mcmc_samples <- get_mcmc_samples(data = data_panel1,                                  id_proposal = \"proposal\",                                  id_assessor = \"assessor\",                                  grade_variable = \"num_grade\") ER_results <- get_er_from_jags(data = data_panel1,                               id_proposal = \"proposal\",                               id_assessor = \"assessor\",                               grade_variable = \"num_grade\",                               mcmc_samples = mcmc_samples) }"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_inits_overdispersed_four_chains.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","title":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","text":"Note function can applied four chains used, otherwise user provide initial values . however recommended use four chain. helper function also use four different random generators provided rjags.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_inits_overdispersed_four_chains.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","text":"","code":"get_inits_overdispersed_four_chains(   merging_panels = FALSE,   ordinal_scale = FALSE,   point_scale = NULL,   heterogeneous_residuals = FALSE,   n_proposals,   n_assessors,   n_panels = NULL,   grades = NULL,   seed )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_inits_overdispersed_four_chains.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","text":"merging_panels sections merged?, default FALSE, e.g. ranking done section/panel separately. ordinal_scale evaluation scores ordinal scale?, default FALSE. point_scale ordinal scale, number points scale?, default NULL heterogeneous_residuals dummy variable informing us whether residuals heterogeneous, default = FALSE. n_proposals number applications / proposals considered. n_assessors number voters / panel members. n_panels number sections / panels, merged, default NULL. grades grades given proposals (whole n_proposals*n_assessors long vector) seed seed used sampling","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_inits_overdispersed_four_chains.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","text":"list overdispersed initial values two chains","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_inits_overdispersed_four_chains.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper function to define overdispersed initial values — get_inits_overdispersed_four_chains","text":"optimal use four chains. also allows sampling use four different samplers implemented rjags (e.g. Wichmann-Hill, Marsaglia-Multicarry, Super-Duper, Mersenne-Twister)","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"MCMC samples — get_mcmc_samples","title":"MCMC samples — get_mcmc_samples","text":"Helper function get mcmc samples. essentially function wrapped around function `runjags::run.jags()`. function also tests convergence chains extends convergence achieved. Find Details.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCMC samples — get_mcmc_samples","text":"","code":"get_mcmc_samples(   data,   id_proposal,   id_assessor,   grade_variable,   path_to_jags_model = NULL,   n_chains = 4,   n_iter = 10000,   n_burnin = 4000,   n_adapt = 1000,   id_panel = NULL,   max_iter = 1e+06,   theta_name = \"proposal_intercept\",   tau_name_proposal = \"tau_proposal\",   sigma_name = \"sigma\",   tau_name_assessor = \"tau_assessor\",   tau_name_panel = \"tau_panel\",   rank_theta_name = \"rank_theta\",   assessor_name = \"assessor_intercept\",   ordinal_scale = FALSE,   point_scale = NULL,   heterogeneous_residuals = FALSE,   seed = 1991,   quiet = FALSE,   dont_bind = FALSE,   inits_type = \"random\",   names_variables_to_sample = NULL,   initial_values = NULL,   rhat_threshold = 1.01,   runjags_method = \"parallel\",   minimal_testing = FALSE )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCMC samples — get_mcmc_samples","text":"data data frame, long format, needed variables specified JAGS model defined text file path given `path_to_jags_model`. id_proposal name variable `data` indicates ID evaluated proposal. id_assessor name variable `data` indicates ID assessor. default `= NULL`, case assessor evaluates/grades one proposal. grade_variable name variable `data` outcome variable, .e. grade score. path_to_jags_model path text file including JAGS model definition. default `= NULL`, function use default model implemented package; `get_default_jags_model()`. n_chains number chains JAGS sampler. default number chains set four. creates optimal conditions changed. parameter `runjags::run.jags()` called `n.chains`. n_iter many iterations used JAGS sampler? `sample` `runjags::run.jags()` function. set `10000` default. n_burnin number burnin iterations included adaptation phase. default set `4000` parameter `runjags::run.jags()` called `burnin`. n_adapt number adaptive iterations discarded adaptation phase. default set `1000`. parameter `runjags::run.jags()` called `adapt`. id_panel name variable `data` indicates ID panel. default `= NULL`, case proposals evaluated panel, panel creates ranking. scenario, ranking established combining merging panels. max_iter maximum number iteration. JAGS sample extended convergence chains. ensure sampler run extend forever maximum number iterations per chain can defined. number iterations achieved, sampler extended. default, function allows `1000000` iterations stopping. theta_name name proposal intercept JAGS model. default also goes default JAGS model build package `proposal_intercept`. tau_name_proposal name tau JAGS model, standard error proposal effects. default also goes default JAGS model build package `tau_proposal`. sigma_name name standard deviation full model. default also goes default JAGS model build package `sigma`. tau_name_assessor name standard error assessor effect JAGS model.  default also goes default JAGS model build package `tau_assessor`. tau_name_panel name standard error panel effect, needed. default also goes default JAGS model build package `tau_panel`. needed ranking established combining merging panels, therefore important `id_panel` `NULL`. rank_theta_name name rank theta JAGS model. default also goes default JAGS model build package `rank_theta`. assessor_name name assessor intercept JAGS model. default also goes default JAGS model build package `assessor_intercept`. ordinal_scale dummy variable informing us whether outcome ordinal scale. default, assume numeric scale parameter set `FALSE`. point_scale integer informing us number points ordinal scale; needed continuous scale. default, assume numeric scale need information  parameter set `NULL`. heterogeneous_residuals dummy variable informing us whether residuals heterogeneous. default residuals assumed homogeneous parameter set `FALSE`. seed seed JAGS model (default = `1991`). seed generate seeds JAGS samplers, ensures reproducibility; see also Details. quiet default model used function generates warning. `quiet = TRUE`, warning shown. dont_bind setting parameter `TRUE` pool chains together returning MCMC. default however set `FALSE`. inits_type type initial values. default initial values randomly selected, .e. `inits_type = \"random\"`. Alternatively, four chains used, initial values can also `\"overdispersed\"`. names_variables_to_sample variables sample can specified, writin names , character-vector. default `NULL` default variables used. initial_values list initial values jags sampler can provided directly. Otherwise `get_inits_overdispersed_four_chains` overdispersed version used, randomly selected. Always using seed ensure computational reproducibility. rhat_threshold threshold rhat decide whether chains converged. Gelman suggested 1.1, smaller better. Hence functions threshold set `1.01` default. runjags_method method call JAGS (`runjags::run.jags()` default set `parallel`). minimal_testing important model parameters tested convergence, e.g. ranks variances? default set `FALSE`.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCMC samples — get_mcmc_samples","text":"function returns list : MCMC samples `samples` parameters defined model, information number chains, length adaptation, iteration burnin phase, indicator whether chains converged (according Rhats smaller `rhat_threshold`). Additionally summary report matrix `runjags::run.jags` included (`summary`) sampled parameter , among others, effective sample size, MCerror, rhat values.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCMC samples — get_mcmc_samples","text":"note convergence: #' Note convergence test applied function: specified length adaptation burnin phase together number specified iterations Rhat values `rhat_threshold`, latter Ns (n_adapt, n_burnin, n_iter) multiplied multiplied 5, 10, 5x10, 10x10, 5x10^2, 10x10^2, etc, either Rhat values `rhat_threshold`number iteration exceed max_iter. Rhat values still small enough warning message printed. note reproducibility: ensure reproducibility chains, parameters need explicit starting values chain needs explicitly selected random samplers (`.RNG.name`) explicitly selected seed (`.RNG.seed`). four chains samplers chosen among `base::Wichmann-Hill`, `base::Marsaglia-Multicarry`, `base::Super-Duper`, `base::Mersenne-Twister`. , less four chains sample (without replacement) samplers selected.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mcmc_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MCMC samples — get_mcmc_samples","text":"","code":"data_panel1 <- get_mock_data() %>%      filter(panel == \"p1\") if (FALSE) { mcmc_samples <- get_mcmc_samples(data = data_panel1,                                  id_proposal = \"proposal\",                                  id_assessor = \"assessor\",                                  grade_variable = \"num_grade\")                                  }"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mock_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Load mock data — get_mock_data","title":"Load mock data — get_mock_data","text":"function loads returns mock data","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mock_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load mock data — get_mock_data","text":"","code":"get_mock_data(panels = \"all\")"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_mock_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load mock data — get_mock_data","text":"panels default '', three panels. possibilities: 'one', 'two', 'three'.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_num_grade_snsf.html","id":null,"dir":"Reference","previous_headings":"","what":"SNSF numeric grade transformation — get_num_grade_snsf","title":"SNSF numeric grade transformation — get_num_grade_snsf","text":"function transforms ordinal grade numeric grade.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_num_grade_snsf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SNSF numeric grade transformation — get_num_grade_snsf","text":"","code":"get_num_grade_snsf(grade)"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_num_grade_snsf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SNSF numeric grade transformation — get_num_grade_snsf","text":"grade grade (\"character\")","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_num_grade_snsf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SNSF numeric grade transformation — get_num_grade_snsf","text":"= 6, AB = 5, B = 4, BC = 3, C = 2, D = 1. grades (COI, etc) transformed NA.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_right_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual votes to correct format — get_right_data_format","title":"Individual votes to correct format — get_right_data_format","text":"function transforms default csv file individual votes correct long format","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_right_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual votes to correct format — get_right_data_format","text":"","code":"get_right_data_format(   individual_votes,   prefix_assessor = NULL,   fun_grade_to_num = get_num_grade_snsf,   delete_NA = TRUE,   first_assessor = NULL,   last_assessor = NULL )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_right_data_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Individual votes to correct format — get_right_data_format","text":"individual_votes matrix containing individual votes. prefix_assessor column name prefix used indicate assessors. fun_grade_to_num function translates grades numeric values delete_NA missing (numeric) grades deleted? (default = TRUE) first_assessor column name first assessor matrix (needed prefix_assessor null). last_assessor column name last assessor matrix (needed prefix_assessor null).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_sucra.html","id":null,"dir":"Reference","previous_headings":"","what":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","title":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","text":"function computes SUCRA.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_sucra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","text":"","code":"get_sucra(   data,   id_proposal,   id_assessor,   grade_variable,   path_to_jags_model = NULL,   mcmc_samples = NULL,   n_chains = 4,   n_iter = 10000,   n_burnin = 4000,   n_adapt = 1000,   id_panel = NULL,   max_iter = 1e+06,   theta_name = \"proposal_intercept\",   tau_name_proposal = \"tau_proposal\",   sigma_name = \"sigma\",   tau_name_assessor = \"tau_assessor\",   tau_name_panel = \"tau_panel\",   rank_theta_name = \"rank_theta\",   assessor_name = \"assessor_intercept\",   ordinal_scale = FALSE,   point_scale = NULL,   heterogeneous_residuals = FALSE,   seed = 1991,   quiet = FALSE,   dont_bind = FALSE,   inits_type = \"random\",   names_variables_to_sample = NULL,   initial_values = NULL,   rhat_threshold = 1.01,   runjags_method = \"parallel\" )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_sucra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","text":"data data frame, long format, needed variables specified JAGS model defined text file path given `path_to_jags_model`. id_proposal name variable `data` indicates ID evaluated proposal. id_assessor name variable `data` indicates ID assessor. default `= NULL`, case assessor evaluates/grades one proposal. grade_variable name variable `data` outcome variable, .e. grade score. path_to_jags_model path text file including JAGS model definition. default `= NULL`, function use default model implemented package; `get_default_jags_model()`. mcmc_samples mcmc sample already run. direct output `get_mcmc_samples()`. default, set `NULL` sampler run. mcmc samples provided , sampling information , e.g. number chains iterations disgarded. n_chains number chains JAGS sampler. default number chains set four. creates optimal conditions changed. parameter `runjags::run.jags()` called `n.chains`. n_iter many iterations used JAGS sampler? `sample` `runjags::run.jags()` function. set `10000` default. n_burnin number burnin iterations included adaptation phase. default set `4000` parameter `runjags::run.jags()` called `burnin`. n_adapt number adaptive iterations discarded adaptation phase. default set `1000`. parameter `runjags::run.jags()` called `adapt`. id_panel name variable `data` indicates ID panel. default `= NULL`, case proposals evaluated panel, panel creates ranking. scenario, ranking established combining merging panels. max_iter maximum number iteration. JAGS sample extended convergence chains. ensure sampler run extend forever maximum number iterations per chain can defined. number iterations achieved, sampler extended. default, function allows `1000000` iterations stopping. theta_name name proposal intercept JAGS model. default also goes default JAGS model build package `proposal_intercept`. tau_name_proposal name tau JAGS model, standard error proposal effects. default also goes default JAGS model build package `tau_proposal`. sigma_name name standard deviation full model. default also goes default JAGS model build package `sigma`. tau_name_assessor name standard error assessor effect JAGS model.  default also goes default JAGS model build package `tau_assessor`. tau_name_panel name standard error panel effect, needed. default also goes default JAGS model build package `tau_panel`. needed ranking established combining merging panels, therefore important `id_panel` `NULL`. rank_theta_name name rank theta JAGS model. default also goes default JAGS model build package `rank_theta`. assessor_name name assessor intercept JAGS model. default also goes default JAGS model build package `assessor_intercept`. ordinal_scale dummy variable informing us whether outcome ordinal scale. default, assume numeric scale parameter set `FALSE`. point_scale integer informing us number points ordinal scale; needed continuous scale. default, assume numeric scale need information  parameter set `NULL`. heterogeneous_residuals dummy variable informing us whether residuals heterogeneous. default residuals assumed homogeneous parameter set `FALSE`. seed seed JAGS model (default = `1991`). seed generate seeds JAGS samplers, ensures reproducibility; see also Details. quiet default model used function generates warning. `quiet = TRUE`, warning shown. dont_bind setting parameter `TRUE` pool chains together returning MCMC. default however set `FALSE`. inits_type type initial values. default initial values randomly selected, .e. `inits_type = \"random\"`. Alternatively, four chains used, initial values can also `\"overdispersed\"`. names_variables_to_sample variables sample can specified, writin names , character-vector. default `NULL` default variables used. initial_values list initial values jags sampler can provided directly. Otherwise `get_inits_overdispersed_four_chains` overdispersed version used, randomly selected. Always using seed ensure computational reproducibility. rhat_threshold threshold rhat decide whether chains converged. Gelman suggested 1.1, smaller better. Hence functions threshold set `1.01` default. runjags_method method call JAGS (`runjags::run.jags()` default set `parallel`).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_sucra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","text":"result names vector SUCRA proposals","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/get_sucra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Surface Under the Cumulative RAnking (SUCRA) — get_sucra","text":"","code":"data_panel1 <- get_mock_data() %>%          filter(panel == \"p1\") if (FALSE) { SUCRA_results <- get_sucra(data = data_panel1,                            id_proposal = \"proposal\",                            id_assessor = \"assessor\",                             grade_variable = \"num_grade\")                            }"},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_er_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Ranks with Credible intervals — plot_er_distributions","title":"Expected Ranks with Credible intervals — plot_er_distributions","text":"function plots expected ranks proposals together xy","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_er_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Ranks with Credible intervals — plot_er_distributions","text":"","code":"plot_er_distributions(   get_mcmc_samples_result,   n_proposals,   name_er_or_theta = \"rank_theta\",   er = TRUE,   title = NULL,   names_proposals = NULL,   inner_credible = 0.5,   outer_credible = 0.9,   ylab = \"Expected Ranks\",   number_fundable = NULL,   outer_show = TRUE,   size_pt = 1.75,   size_outer = 0.5,   size_inner = 2,   alpha_inner = 0.5,   alpha_outer = 1,   proposal = \"Proposal \",   use_outer_inner = \"inner\",   change_random_selection_to = NULL,   change_rejected_to = NULL,   change_accepted_to = NULL )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_er_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected Ranks with Credible intervals — plot_er_distributions","text":"get_mcmc_samples_result mcmc samples n_proposals number proposals panel / call name_er_or_theta name parameter estimating ranks (proposal effect) Bayesian Hierarchical model (default = \"rank_thetta\") er TRUE , ER plotted, otherwise thetas (proposal effects) plotted. (default = TRUE) title title plot (default = NULL, title). names_proposals names proposals written x-axis ticks. Note ordering one given `get_mcmc_samples()` function (default = NULL, simply numerated). inner_credible percentage inner credible interval (default = .5) outer_credible percentage outer credible interval (default = .9) ylab y axis label (default = \"Expected Ranks\") (default = NULL, FL drawn). number_fundable number proposals can funded outer_show outer credible interval shown (default = TRUE) size_pt size point estimate (mean, ER) (default = 1.5) size_outer size line representing outer CrI (default = .5) size_inner size line representing inner CrI (default = 2) alpha_inner alpha color inner CrI alpha_outer alpha color inner CrI proposal Word written infront number (default = \"Proposal\") use_outer_inner inner outer CRI used funding decisions (default = \"inner\") change_random_selection_to \"random selection\" group called something else; f.ex \"tie group\" (default = NULL) change_rejected_to \"rejected\" group called something else (default = NULL) change_accepted_to \"accepted\" group called something else (default = NULL)","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_er_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected Ranks with Credible intervals — plot_er_distributions","text":"result plot expected rank together credible intervals","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_er_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected Ranks with Credible intervals — plot_er_distributions","text":"","code":"data_panel1 <- get_mock_data() %>%      filter(panel == \"p1\") if (FALSE) { mcmc_samples <- get_mcmc_samples(data = data_panel1,                                  id_proposal = \"application\",                                  id_assessor = \"voter\",                                  grade_variable = \"num_grade\") plot_er_distributions(mcmc_samples,                       n_proposals = data_panel1 %>%                            summarise(n = n_distinct(application)) %>%                            pull(),                       number_fundable = 5)                       }"},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_rankogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Rankogram — plot_rankogram","title":"Rankogram — plot_rankogram","text":"function produces rankogram","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_rankogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rankogram — plot_rankogram","text":"","code":"plot_rankogram(   data,   cumulative_rank_prob = FALSE,   id_proposal,   id_assessor,   mcmc_samples = NULL,   grade_variable = \"num_grade\",   path_to_jags_model = NULL,   n_chains = 4,   n_iter = 10000,   n_burnin = 4000,   n_adapt = 1000,   id_panel = NULL,   max_iter = 1e+06,   theta_name = \"proposal_intercept\",   tau_name_proposal = \"tau_proposal\",   sigma_name = \"sigma\",   tau_name_assessor = \"tau_assessor\",   tau_name_panel = \"tau_panel\",   rank_theta_name = \"rank_theta\",   assessor_name = \"assessor_intercept\",   ordinal_scale = FALSE,   point_scale = NULL,   heterogeneous_residuals = FALSE,   seed = 1991,   quiet = FALSE,   dont_bind = FALSE,   inits_type = \"random\",   names_variables_to_sample = NULL,   initial_values = NULL,   rhat_threshold = 1.01,   runjags_method = \"parallel\" )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_rankogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rankogram — plot_rankogram","text":"data data frame, long format, needed variables specified JAGS model defined text file path given `path_to_jags_model`. cumulative_rank_prob cumulative ranking probabilities represented instead id_proposal name variable `data` indicates ID evaluated proposal. id_assessor name variable `data` indicates ID assessor. default `= NULL`, case assessor evaluates/grades one proposal. mcmc_samples mcmc sample already run. direct output `get_mcmc_samples()`. default, set `NULL` sampler run. mcmc samples provided , sampling information , e.g. number chains iterations disgarded. grade_variable name variable `data` outcome variable, .e. grade score. path_to_jags_model path text file including JAGS model definition. default `= NULL`, function use default model implemented package; `get_default_jags_model()`. n_chains number chains JAGS sampler. default number chains set four. creates optimal conditions changed. parameter `runjags::run.jags()` called `n.chains`. n_iter many iterations used JAGS sampler? `sample` `runjags::run.jags()` function. set `10000` default. n_burnin number burnin iterations included adaptation phase. default set `4000` parameter `runjags::run.jags()` called `burnin`. n_adapt number adaptive iterations discarded adaptation phase. default set `1000`. parameter `runjags::run.jags()` called `adapt`. id_panel name variable `data` indicates ID panel. default `= NULL`, case proposals evaluated panel, panel creates ranking. scenario, ranking established combining merging panels. max_iter maximum number iteration. JAGS sample extended convergence chains. ensure sampler run extend forever maximum number iterations per chain can defined. number iterations achieved, sampler extended. default, function allows `1000000` iterations stopping. theta_name name proposal intercept JAGS model. default also goes default JAGS model build package `proposal_intercept`. tau_name_proposal name tau JAGS model, standard error proposal effects. default also goes default JAGS model build package `tau_proposal`. sigma_name name standard deviation full model. default also goes default JAGS model build package `sigma`. tau_name_assessor name standard error assessor effect JAGS model.  default also goes default JAGS model build package `tau_assessor`. tau_name_panel name standard error panel effect, needed. default also goes default JAGS model build package `tau_panel`. needed ranking established combining merging panels, therefore important `id_panel` `NULL`. rank_theta_name name rank theta JAGS model. default also goes default JAGS model build package `rank_theta`. assessor_name name assessor intercept JAGS model. default also goes default JAGS model build package `assessor_intercept`. ordinal_scale dummy variable informing us whether outcome ordinal scale. default, assume numeric scale parameter set `FALSE`. point_scale integer informing us number points ordinal scale; needed continuous scale. default, assume numeric scale need information  parameter set `NULL`. heterogeneous_residuals dummy variable informing us whether residuals heterogeneous. default residuals assumed homogeneous parameter set `FALSE`. seed seed JAGS model (default = `1991`). seed generate seeds JAGS samplers, ensures reproducibility; see also Details. quiet default model used function generates warning. `quiet = TRUE`, warning shown. dont_bind setting parameter `TRUE` pool chains together returning MCMC. default however set `FALSE`. inits_type type initial values. default initial values randomly selected, .e. `inits_type = \"random\"`. Alternatively, four chains used, initial values can also `\"overdispersed\"`. names_variables_to_sample variables sample can specified, writin names , character-vector. default `NULL` default variables used. initial_values list initial values jags sampler can provided directly. Otherwise `get_inits_overdispersed_four_chains` overdispersed version used, randomly selected. Always using seed ensure computational reproducibility. rhat_threshold threshold rhat decide whether chains converged. Gelman suggested 1.1, smaller better. Hence functions threshold set `1.01` default. runjags_method method call JAGS (`runjags::run.jags()` default set `parallel`).","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plot_rankogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rankogram — plot_rankogram","text":"result plot rankogram (cumulative ranking probabilities)","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plotting_er_results.html","id":null,"dir":"Reference","previous_headings":"","what":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","title":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","text":"function plot results form JAGS-ER","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plotting_er_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","text":"","code":"plotting_er_results(   er_results,   id_proposal = \"id_proposal\",   how_many_fundable = NULL,   title = \"\",   ordering_increasing = TRUE,   draw_funding_line = TRUE,   result_show = TRUE,   easy_numbering = TRUE,   no_pm_available = FALSE,   colors = NULL,   pt_size = 1,   line_size = 0.5,   alpha_line = 1,   alpha_pt = 1,   line_type_fl = \"longdash\",   x_expand = 0.6,   alpha_fl = 0.5,   color_fl = \"darkgray\",   size_fl = 2,   padding_right = 0.3,   padding_left = 0.1,   grep_size = 2,   nudge_x = 0.5,   min_segment_length = 0,   segment_curvature = -0.1,   segment_angle = 20,   segment_ncp = 3,   segment_size = 0.15,   hjust_y_axis = 1.5 )"},{"path":"https://snsf-data.github.io/ERforResearch/reference/plotting_er_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","text":"er_results resulting object `get_er_from_jags()` function id_proposal name variable giving distinct application identifiers. (default = id_proposal) how_many_fundable number proposals can funded? (default = NULL) Null, graph black white title beginning plot title (default = \" \"). ordering_increasing order rank increasing, dowm: rank 1 top rank n bottom (default = TRUE) draw_funding_line funding line drawn? (default = TRUE) result_show boolean telling us whether application number/id added next ER points (default = FALSE). easy_numbering ER results just numbered? (default = TRUE) no_pm_available posterior mean computed? (default = FALSE, e.g. computed object) colors color pallette can changes. pt_size size points (default = 1) line_size size lines (default = 0.5) alpha_line ... alpha_pt ... line_type_fl ... fl = funding line x_expand make funding line longer sides (default = .3) alpha_fl ... color_fl ... size_fl ... padding_right ggrepel padding_left ggrepel grep_size size labels points (default = .25). nudge_x element ggrepel. min_segment_length ... segment_curvature ... segment_angle ... segment_ncp ... segment_size ... hjust_y_axis ...","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plotting_er_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","text":"result plot","code":""},{"path":"https://snsf-data.github.io/ERforResearch/reference/plotting_er_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Plot of the Expected Rank from a JAGS model — plotting_er_results","text":"","code":"dat <- get_mock_data() %>% filter(panel == \"p1\") if (FALSE) { ER_results <- get_er_from_jags(data = dat,                   id_proposal = \"proposal\",                   id_assessor = \"assessor\",                   grade_variable = \"num_grade\",                   n_chains = 2, n_iter = 1000,                   n_burnin = 1000) plotting_er_results(ER_results, title = \"Panel 1\", how_many_fundable = 5) }"},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-400","dir":"Changelog","previous_headings":"","what":"ERforResearch 4.0.0","title":"ERforResearch 4.0.0","text":"(!!!) switch rjags runjags get_mcmc_samples(). function documentations updated due change runjags. (!!!) important naming changes align package-communications: application proposal, voter assessor section panel. colored points plot_er_distribution().","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-3119000","dir":"Changelog","previous_headings":"","what":"ERforResearch 3.1.1.9000","title":"ERforResearch 3.1.1.9000","text":"added option ER plotting function allow PM, skipping plot","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-311","dir":"Changelog","previous_headings":"","what":"ERforResearch 3.1.1","title":"ERforResearch 3.1.1","text":"added option ER plotting function allow PM, skipping plot documentation updates","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-310","dir":"Changelog","previous_headings":"","what":"ERforResearch 3.1.0","title":"ERforResearch 3.1.0","text":"documentation updates added parameter rhat_threshold get_mcmc_samples() allow user change threshold used decide whether chains converged. added option maximal_testing mcmc function add default continuous model nine point scale added na.rm = TRUE whenever max(rhat) calculated","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-3009000","dir":"Changelog","previous_headings":"","what":"ERforResearch 3.0.0.9000","title":"ERforResearch 3.0.0.9000","text":"nothing add","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-300","dir":"Changelog","previous_headings":"","what":"ERforResearch 3.0.0","title":"ERforResearch 3.0.0","text":"Include Reviewer comments: changed name get_inits_overdispersed_two_chains() get_inits_overdispersed_four_chains() implemented new default four chains different RNGs. get_mcmc_samples() function defaulted four chains four different samplers fixed (random dependent seed) starting values. changed Rhat threshold 1.01 instead 1.1 update updating loop (multiplier n.adapt, burnin iterations) get_max_rhat() function deleted added option compute effective sample size MCMC error get_mcmc_sample() default variables get_mcmc_sample() changed able sample models discussed paper (Heyard et al (2021)), default model rankability computation etc deleted documentation get_er_from_jags() updated","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-200","dir":"Changelog","previous_headings":"","what":"ERforResearch 2.0.0","title":"ERforResearch 2.0.0","text":"add max_iter option get_er_form_jags() new option add rank based pm get_er_from_jags() function fix get_mcmc_samples() added maximum number iterations get_mcmc_samples() update get_sankey_plot_br() added get_sankey_plot_br() function get_mcmc_samples() now tests whether chains converge, , adaptation, burnin iteration phases increases.","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-100","dir":"Changelog","previous_headings":"","what":"ERforResearch 1.0.0","title":"ERforResearch 1.0.0","text":"get_mcmc_samples() now tests whether chains converge, , adaptation, burnin iteration phases increases. functions adapted accordingly possibility add overdispersed initial values get_mcmc_samples() functions convergence diagnostic: get_inits_overdispersed_two_chains() get_max_rhat() default model can now also ordinal outcome variable heterogenous residual structure","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-0109009","dir":"Changelog","previous_headings":"","what":"ERforResearch 0.1.0.9009","title":"ERforResearch 0.1.0.9009","text":"allow model account heterogenous residuals","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-0109008","dir":"Changelog","previous_headings":"","what":"ERforResearch 0.1.0.9008","title":"ERforResearch 0.1.0.9008","text":"allow model account heterogenous residuals extended get_er_from_jags() used ordinal outcomes added ordinal extension get_mcmc_samples() function","code":""},{"path":"https://snsf-data.github.io/ERforResearch/news/index.html","id":"erforresearch-0109007","dir":"Changelog","previous_headings":"","what":"ERforResearch 0.1.0.9007","title":"ERforResearch 0.1.0.9007","text":"added option choose inner outer CrI funding decision update get_right_data_format()","code":""}]
